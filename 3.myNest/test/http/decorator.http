### Request参数装饰器
GET {{host}}:{{port}}/users/req

### Query参数装饰器
GET {{host}}:{{port}}/users/query?id=123&random={{$random.address.city}}

### headers 参数装饰器
GET {{host}}:{{port}}/users/headers
custom-header: 123

### session 参数装饰器
GET {{host}}:{{port}}/users/session

### ip 参数装饰器
GET {{host}}:{{port}}/users/ip

### 路径参数params 参数装饰器
GET {{host}}:{{port}}/users/sdadawdf/info/sgrgsrgsf

### 路径通配符 参数装饰器
GET {{host}}:{{port}}/users/star/abccccde

### Body
POST {{host}}:{{port}}/users/create
Content-Type: application/json

{
  "username": "张三",
  "hhhh": 12313
}

### cookie
POST {{host}}:{{port}}/users/cookie

### response 使用response装饰器
GET {{host}}:{{port}}/users/response

### hangout 请求应当挂起
GET {{host}}:{{port}}/users/hangout

### passthrough 请求不应当挂起
GET {{host}}:{{port}}/users/passthrough

### next 请求不应当挂起
GET {{host}}:{{port}}/users/next

### 自定义装饰器
POST {{host}}:{{port}}/users/custom
Content-Type: application/json

{
  "user": {
      "role": "admin",
      "name": "张三"
  }
}

> {%
    client.test("Custom decorator request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response contains expected data structure", function () {
        client.assert(response.body.code === '0', "Response code is not '0'");
        client.assert(response.body.data !== undefined, "Response data is undefined");
        client.assert(response.body.data.role === 'admin', "User role is not 'admin'");
        client.assert(response.body.data.name === '张三', "User name is not '张三'");
    });
%}
