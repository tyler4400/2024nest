import { Controller, Get, Render, Post, Redirect, Body, UseFilters, HttpException, Param, ParseIntPipe, Put, Delete, Headers, Res, Query } from '@nestjs/common';
import { Create<%= classify(entityName) %>Dto, Update<%= classify(entityName) %>Dto } from 'src/shared/dto/<%= dasherize(entityName) %>.dto';
import { <%= classify(entityName) %>Service } from 'src/shared/services/<%= dasherize(entityName) %>.service';
import { AdminExceptionFilter } from '../filters/admin-exception-filter';
import { Response } from 'express';
import { ParseOptionalIntPipe } from 'src/shared/pipes/parse-optional-int.pipe';

@UseFilters(AdminExceptionFilter)
@Controller('admin/<%= dasherize(plural(entityName)) %>')
export class <%= classify(entityName) %>Controller {
    constructor(
        private readonly <%= camelize(entityName) %>Service: <%= classify(entityName) %>Service
    ) { }

    @Get()
    @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-list')
    async findAll(@Query('keyword') keyword: string = '',
        @Query('page', new ParseOptionalIntPipe(1)) page: number,
        @Query('limit', new ParseOptionalIntPipe(10)) limit: number) {
        const { <%= camelize(plural(entityName)) %>, total } = await this.<%= camelize(entityName) %>Service.findAllWithPagination(page, limit, keyword);
        const pageCount = Math.ceil(total / limit);
        return { <%= camelize(plural(entityName)) %>, keyword, page, limit, pageCount };
    }

    @Get('create')
    @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-form')
    createForm() {
        return { <%= camelize(entityName) %>: {} }
    }

    @Post()
    @Redirect('/admin/<%= dasherize(plural(entityName)) %>')
    async create(@Body() create<%= classify(entityName) %>Dto: Create<%= classify(entityName) %>Dto) {
        await this.<%= camelize(entityName) %>Service.create(create<%= classify(entityName) %>Dto);
        return { success: true }
    }

    @Get(':id/edit')
    @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-form')
    async editForm(@Param('id', ParseIntPipe) id: number) {
        const <%= camelize(entityName) %> = await this.<%= camelize(entityName) %>Service.findOne({ where: { id } });
        if (!<%= camelize(entityName) %>) throw new HttpException('<%= classify(entityName) %> not Found', 404);
        return { <%= camelize(entityName) %> };
    }

    @Put(':id')
    async update(@Param('id', ParseIntPipe) id: number, @Body() update<%= classify(entityName) %>Dto: Update<%= classify(entityName) %>Dto, @Res({ passthrough: true }) res: Response, @Headers('accept') accept: string) {
        await this.<%= camelize(entityName) %>Service.update(id, update<%= classify(entityName) %>Dto);
        if (accept === 'application/json') {
            return { success: true };
        } else {
            return res.redirect(`/admin/<%= dasherize(plural(entityName)) %>`);
        }
    }

    @Delete(":id")
    async delete(@Param('id', ParseIntPipe) id: number) {
        await this.<%= camelize(entityName) %>Service.delete(id);
        return { success: true }
    }

    @Get(':id')
    @Render('<%= dasherize(entityName) %>/<%= dasherize(entityName) %>-detail')
    async findOne(@Param('id', ParseIntPipe) id: number) {
        const <%= camelize(entityName) %> = await this.<%= camelize(entityName) %>Service.findOne({ where: { id } });
        if (!<%= camelize(entityName) %>) throw new HttpException('<%= classify(entityName) %> not Found', 404);
        return { <%= camelize(entityName) %> };
    }
}
