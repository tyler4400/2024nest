import 'reflect-metadata';
import { RequestMethod } from '@nestjs/common';
import { PipeTransform } from '@nestjs/common';
import { ExecutionContext } from '../common';
import { CanActivate } from '@nestjs/common';
export declare class NestApplication {
    protected readonly module: any;
    private readonly app;
    private readonly providerInstances;
    private readonly globalProviders;
    private readonly moduleProviers;
    private readonly middlewares;
    private readonly excludedRoutes;
    private readonly defaultGlobalHttpExceptionFilter;
    private readonly globalHttpExceptionFilters;
    private readonly globalPipes;
    private readonly globalGuards;
    constructor(module: any);
    useGlobalPipes(...pipes: PipeTransform[]): void;
    useGlobalFilters(...filters: any[]): void;
    exclude(...routeInfos: any[]): this;
    initMiddlewares(): void;
    apply(...middleware: any[]): this;
    getMiddelwareInstance(middleware: any): any;
    isExcluded(reqPath: string, method: RequestMethod): boolean;
    forRoutes(...routes: any[]): this;
    private normalizeRouteInfo;
    private addDefaultProviders;
    initProviders(): Promise<void>;
    private registerProvidersFromModule;
    private isModule;
    addProvider(provider: any, module: any, global?: boolean): void;
    use(middleware: any): void;
    private getProviderByToken;
    private resolveDependencies;
    private getGuardInstance;
    callGuards(guards: CanActivate[], context: ExecutionContext): Promise<void>;
    callInterceptors(controller: any, method: any, args: any, interceptors: any, context: any, host: any, pipes: any): void;
    initController(module: any): Promise<void>;
    getFilterInstance(filter: any): any;
    private callExceptionFilters;
    private getResponseMetadata;
    private resolveParams;
    private getPipeInstance;
    initGlobalFilters(): Promise<void>;
    private initGlobalPipes;
    initGlobalGuards(): void;
    useGlobalGuards(...guards: any[]): void;
    listen(port: any): Promise<void>;
}
